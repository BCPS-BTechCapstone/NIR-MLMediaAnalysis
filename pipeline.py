import argparse
import os
import pandas as pd
from data_augmentation import main as data_augmentation_main  # Import the main function from data_augmentation
from plotter import plot_data  # Import the function from plotter.py

def main(args):
    # Run the data augmentation process with the args Namespace
    data_augmentation_main(args)

    # Set up the plot directory
    plots_dir = 'Plots'
    os.makedirs(plots_dir, exist_ok=True)

    # Iterate over all the subsample files generated by data augmentation
    subsample_files = [f for f in os.listdir(args.export_path) if f.startswith(args.sample_name) and f.endswith('.csv')]
    for subsample_file in subsample_files:
        subsample_path = os.path.join(args.export_path, subsample_file)
        
        # Check if the subsample file is empty and skip if it is
        if os.path.getsize(subsample_path) == 0:
            print(f"Skipping empty subsample file: {subsample_file}")
            continue

        data = pd.read_csv(subsample_path)
        
        # If data is empty after reading, skip further processing
        if data.empty:
            print(f"Skipping empty subsample file: {subsample_file}")
            continue

        # Generate output filename for each subsample plot
        base_filename = os.path.basename(subsample_path).replace('.csv', '_3d_plot.png')
        output_filename = os.path.join(plots_dir, base_filename)

        # Call the plot_data function for each subsample
        plot_data(data, output_filename)

if __name__ == "__main__":
    # Setup argparse
    parser = argparse.ArgumentParser(
        description="Process time-series CSV files for a specific sample.")

    # Positional argument for sample name
    parser.add_argument('sample_name', type=str,
                        help='The sample name (e.g., "Sample1")')

    # Optional arguments (with defaults)
    parser.add_argument('-s', '--subsamples', type=int, default=3,
                        help='Number of subsamples to create (default: 3)')
    parser.add_argument('-i', '--initial_delta', type=int, default=60,
                        help='Initial time delta between scans in seconds (default: 60)')
    parser.add_argument('-d', '--append_delta', type=int, default=900,
                        help='Time delta for appending in seconds after the first split (default: 900)')
    parser.add_argument('-p', '--folder_path', type=str, default='Raw_Data',
                        help='Relative path to the folder containing the files (default: Raw_Data)')
    parser.add_argument('-e', '--export_path', type=str, default='Datasets',
                        help='Relative path to export the processed subsamples (default: Datasets)')
    parser.add_argument('-y', '--yes', action='store_true', help='Automatically confirm deletion of existing subsample files')

    args = parser.parse_args()
    main(args)
